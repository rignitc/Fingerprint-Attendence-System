import streamlit as st
import pandas as pd
import mysql.connector
import streamlit_authenticator as stauth
import warnings
warnings.filterwarnings("ignore")
import yaml
from yaml.loader import SafeLoader

with open('config.yaml') as file:
    config = yaml.load(file, Loader=SafeLoader)

    
st.set_page_config(page_title="RIG NITC",page_icon=":robot_face:",layout="wide")
st.title(":ledger:  ATTENDENCE REPORT")
st.markdown('''<style>
            div.block-container{padding-top:1rem;}
            .sidebar.sidebar-content {transition: margin-left 0.5s;font-size: 20px;background-color:black;}
            </style>''',unsafe_allow_html=True)
#Use thisto get data from csv 
# df = pd.read_csv("data.csv",encoding = "ISO-8859-1")
#connecting data from mysql database
conn = mysql.connector.connect(user='root', password='220401',host='localhost',database='ATTENDENCE_DATA')
cur = conn.cursor()
df =pd.read_sql("SELECT * FROM MAIN_DATA",conn)





authenticator = stauth.Authenticate(
    config['credentials'],
    config['cookie']['name'],
    config['cookie']['key'],
    config['cookie']['expiry_days'],
    config['pre-authorized']
)
authenticator.login(location='main',max_login_attempts=5,max_concurrent_users=10,)

# Update the yaml file whenever something is updated
with open('../config.yaml', 'w') as file:
    yaml.dump(config, file, default_flow_style=False)
if st.session_state["authentication_status"]:
        #FrontEnd for Sidebar
        st.sidebar.header(":traffic_light: Filter by")
        batch = st.sidebar.multiselect("Pick the Batch",df["Batch"].unique())
        weeknumber = st.sidebar.multiselect("Pick the Week Number",df["Week No"].unique())
        month = st.sidebar.multiselect("Pick the month",df["Month"].unique())
        year = st.sidebar.multiselect("Pick the year",df["Year"].unique())
        hours_satisfied = st.sidebar.multiselect("Is WorkHours Satisfied ?",df["Work_hours_satisfied"].unique())
        

        # logic for filter
        selected = {
                'Batch': batch,
                'Week No': weeknumber,
                'Month': month,
                'Work_hours_satisfied': hours_satisfied,
                'Year':year,
            }
        filtered_df=df.copy()
        for key,value in selected.items():
            if value:filtered_df=filtered_df[filtered_df[key].isin(value)]
            
        st.write(filtered_df.style.background_gradient(cmap='Blues'))
        
        def handle_user(status=0):
            if status == '1':
                try:
                    email_of_registered_user, username_of_registered_user, name_of_registered_user = authenticator.register_user(pre_authorization=False)
                    if email_of_registered_user:
                        st.success('User registered successfully')
                except Exception as e:
                    st.error(e)
            elif status == '2':
                try:
                    if authenticator.update_user_details(st.session_state["username"]):
                        st.success('Entries updated successfully')
                except Exception as e:
                    st.error(e)
    
            
        col1,col2,col3 = st.columns([1,1,1])
        with col1:
            st.button(label="Register", on_click=handle_user,args=('1',))
        with col2:
            st.button(label="Update Credentials", on_click=handle_user,args=('2',))
        with col3:
            st.button(label="Logout", on_click=authenticator.logout)
        
        
     
else:
    st.write("CONTACT ADMIN FOR CREDENTIALS")

    




    